[tox]
envlist = yamllint,bashate,markdownlint,build

[testenv]
skip_install = True
passenv = DOCS_*
deps =
  mkdocs
  mkdocs-awesome-pages-plugin
  mkdocs-git-authors-plugin>=0.6.5
  mkdocs-git-revision-date-localized-plugin
  mkdocs-glightbox
  mkdocs-macros-plugin
  mkdocs-material>=9.5.3
  mkdocs-redirects
  mike
  pillow
  cairosvg
commands =
  mkdocs {posargs}
allowlist_externals =
  {toxinidir}/scripts/*

[testenv:mkdocs]

[testenv:serve]
setenv =
  DOCS_SITE_URL = http://localhost:8000
commands =
  mkdocs serve {posargs}

[testenv:mike]
passenv =
  {[testenv]passenv}
  CI_*
  GIT_*
commands =
  {toxinidir}/scripts/mike.sh {posargs}

[testenv:build]
commands =
  mkdocs build --strict

[testenv:check]
deps =
  {[testenv]deps}
  linkchecker
commands =
  {toxinidir}/scripts/linkcheck-local.sh {posargs}

[testenv:check-prod]
deps =
  {[testenv]deps}
  linkchecker
commands =
  {toxinidir}/scripts/linkcheck-production.sh {posargs}

[testenv:deploy-github]
passenv =
  {[testenv]passenv}
  GITHUB_*
commands =
  {[testenv:build]commands}
  mkdocs gh-deploy {posargs}

[testenv:deploy-gitlab]
passenv =
  {[testenv]passenv}
  CI_*
commands =
  mkdocs build --strict --site-dir=public

[testenv:bashate]
envdir = {toxworkdir}/bashate
deps =
  bashate
commands =
  bashate {toxinidir}/scripts/from-markdown.sh {toxinidir}/scripts/mike.sh {toxinidir}/.githooks/pre-commit {toxinidir}/.githooks/post-commit {toxinidir}/.githooks/pre-push

[testenv:to-odt]
envdir = {toxworkdir}/pandoc
deps =
  jinja2-cli[yaml]
commands =
  {toxinidir}/scripts/from-markdown.sh -t odt {posargs}

[testenv:to-docx]
envdir = {toxworkdir}/pandoc
deps =
  jinja2-cli[yaml]
commands =
  {toxinidir}/scripts/from-markdown.sh -t docx {posargs}

[testenv:gitlint]
envdir = {toxworkdir}/gitlint
deps = gitlint
commands = gitlint {posargs}

[testenv:yamllint]
envdir = {toxworkdir}/yamllint
deps = yamllint
commands = yamllint {toxinidir}

[testenv:markdownlint]
envdir = {toxworkdir}/markdownlint
deps =
  pymarkdownlnt!=0.9.13
commands = pymarkdown -c .pymarkdown.json scan -r docs

[testenv:bumpversion]
envdir = {toxworkdir}/bumpversion
passenv =
  # Git can only find its global configuration if it knows where the
  # user's HOME is.
  HOME
  # If we set sign_tags in .bumpversion.cfg, we need to pass in the
  # GnuPG agent reference to avoid having to retype the passphrase for
  # an already-cached private key.
  GPG_AGENT_INFO
deps = bump2version
commands = bump2version {posargs}
